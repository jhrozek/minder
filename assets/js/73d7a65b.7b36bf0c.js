"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[9194],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),f=p(n),m=r,d=f["".concat(s,".").concat(m)]||f[m]||u[m]||l;return n?i.createElement(d,o(o({ref:t},c),{},{components:n})):i.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[f]="string"==typeof e?e:r,o[1]=a;for(var p=2;p<l;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},64053:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>p});var i=n(87462),r=(n(67294),n(3905));const l={title:"Presence of a License File",sidebar_position:80},o="Presence of a License File Rule",a={unversionedId:"ref/rules/license",id:"ref/rules/license",title:"Presence of a License File",description:"The following rule type is available for verifying if a license file is present and it is of a certain type.",source:"@site/docs/ref/rules/license.md",sourceDirName:"ref/rules",slug:"/ref/rules/license",permalink:"/ref/rules/license",draft:!1,tags:[],version:"current",sidebarPosition:80,frontMatter:{title:"Presence of a License File",sidebar_position:80},sidebar:"minder",previous:{title:"GitHub Actions",permalink:"/ref/rules/github_actions"},next:{title:"REST API Documentation",permalink:"/ref/api"}},s={},p=[{value:"<code>license</code> - Verifies if there is a license file of a given type present in the repository",id:"license---verifies-if-there-is-a-license-file-of-a-given-type-present-in-the-repository",level:2},{value:"Entity",id:"entity",level:3},{value:"Type",id:"type",level:3},{value:"Rule parameters",id:"rule-parameters",level:3},{value:"Rule definition options",id:"rule-definition-options",level:3}],c={toc:p},f="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"presence-of-a-license-file-rule"},"Presence of a License File Rule"),(0,r.kt)("p",null,"The following rule type is available for verifying if a license file is present and it is of a certain type."),(0,r.kt)("h2",{id:"license---verifies-if-there-is-a-license-file-of-a-given-type-present-in-the-repository"},(0,r.kt)("inlineCode",{parentName:"h2"},"license")," - Verifies if there is a license file of a given type present in the repository"),(0,r.kt)("p",null,"This rule allows you to monitor if a license file is present in the repository and if its license type complies with\nthe configured license type in your profile."),(0,r.kt)("h3",{id:"entity"},"Entity"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"repository"))),(0,r.kt)("h3",{id:"type"},"Type"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"license"))),(0,r.kt)("h3",{id:"rule-parameters"},"Rule parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None")),(0,r.kt)("h3",{id:"rule-definition-options"},"Rule definition options"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"license")," rule supports the following options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"license_filename (string)")," - The license filename to look for.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"LICENSE"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"LICENSE.txt"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"LICENSE.md"),", etc."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"license_type (string)")," - The license type to look for in ",(0,r.kt)("inlineCode",{parentName:"li"},"license_filename"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"MIT"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Apache"),", etc. See ",(0,r.kt)("a",{parentName:"li",href:"https://spdx.org/licenses/"},"SPDX License List")," for a list of license types. Leave ",(0,r.kt)("inlineCode",{parentName:"li"},'""')," to only check for the presence of the file.")))))}u.isMDXComponent=!0}}]);