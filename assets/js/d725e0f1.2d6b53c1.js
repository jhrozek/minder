"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[7294],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>_});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),h=u(r),d=i,_=h["".concat(p,".").concat(d)]||h[d]||c[d]||l;return r?n.createElement(_,o(o({ref:t},s),{},{components:r})):n.createElement(_,o({ref:t},s))}));function _(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=r.length,o=new Array(l);o[0]=d;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[h]="string"==typeof e?e:i,o[1]=a;for(var u=2;u<l;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},42818:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var n=r(87462),i=(r(67294),r(3905));const l={title:"Branch Protections",sidebar_position:10},o="Branch Protection Rules",a={unversionedId:"ref/rules/branch_protection",id:"ref/rules/branch_protection",title:"Branch Protections",description:"The following rule type is available for branch protection.",source:"@site/docs/ref/rules/branch_protection.md",sourceDirName:"ref/rules",slug:"/ref/rules/branch_protection",permalink:"/ref/rules/branch_protection",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Branch Protections",sidebar_position:10},sidebar:"minder",previous:{title:"minder version",permalink:"/ref/cli/minder_version"},next:{title:"Trusty Score",permalink:"/ref/rules/activity"}},p={},u=[{value:"<code>branch_protection_allow_deletions</code> - Whether the branch can be deleted",id:"branch_protection_allow_deletions---whether-the-branch-can-be-deleted",level:2},{value:"Entity",id:"entity",level:3},{value:"Type",id:"type",level:3},{value:"Rule parameters",id:"rule-parameters",level:3},{value:"Rule definition options",id:"rule-definition-options",level:3},{value:"<code>branch_protection_allow_force_pushes</code> - Whether force pushes are allowed to the branch",id:"branch_protection_allow_force_pushes---whether-force-pushes-are-allowed-to-the-branch",level:2},{value:"Entity",id:"entity-1",level:3},{value:"Type",id:"type-1",level:3},{value:"Rule parameters",id:"rule-parameters-1",level:3},{value:"Rule definition options",id:"rule-definition-options-1",level:3},{value:"<code>branch_protection_allow_fork_syncing</code> - Whether users can pull changes from upstream when the branch is locked",id:"branch_protection_allow_fork_syncing---whether-users-can-pull-changes-from-upstream-when-the-branch-is-locked",level:2},{value:"Entity",id:"entity-2",level:3},{value:"Type",id:"type-2",level:3},{value:"Rule parameters",id:"rule-parameters-2",level:3},{value:"Rule definition options",id:"rule-definition-options-2",level:3},{value:"<code>branch_protection_enabled</code> - Verifies that a branch has a branch protection rule",id:"branch_protection_enabled---verifies-that-a-branch-has-a-branch-protection-rule",level:2},{value:"Entity",id:"entity-3",level:3},{value:"Type",id:"type-3",level:3},{value:"Rule parameters",id:"rule-parameters-3",level:3},{value:"Rule definition options",id:"rule-definition-options-3",level:3},{value:"<code>branch_protection_enforce_admins</code> - Whether the protection rules apply to repository administrators",id:"branch_protection_enforce_admins---whether-the-protection-rules-apply-to-repository-administrators",level:2},{value:"Entity",id:"entity-4",level:3},{value:"Type",id:"type-4",level:3},{value:"Rule parameters",id:"rule-parameters-4",level:3},{value:"Rule definition options",id:"rule-definition-options-4",level:3},{value:"<code>branch_protection_lock_branch</code> - Whether the branch is locked",id:"branch_protection_lock_branch---whether-the-branch-is-locked",level:2},{value:"Entity",id:"entity-5",level:3},{value:"Type",id:"type-5",level:3},{value:"Rule parameters",id:"rule-parameters-5",level:3},{value:"Rule definition options",id:"rule-definition-options-5",level:3},{value:"<code>branch_protection_require_conversation_resolution</code> - Whether PR reviews must be resolved before merging",id:"branch_protection_require_conversation_resolution---whether-pr-reviews-must-be-resolved-before-merging",level:2},{value:"Entity",id:"entity-6",level:3},{value:"Type",id:"type-6",level:3},{value:"Rule parameters",id:"rule-parameters-6",level:3},{value:"Rule definition options",id:"rule-definition-options-6",level:3},{value:"<code>branch_protection_require_linear_history</code> - Whether the branch requires a linear history with no merge commits",id:"branch_protection_require_linear_history---whether-the-branch-requires-a-linear-history-with-no-merge-commits",level:2},{value:"Entity",id:"entity-7",level:3},{value:"Type",id:"type-7",level:3},{value:"Rule parameters",id:"rule-parameters-7",level:3},{value:"Rule definition options",id:"rule-definition-options-7",level:3},{value:"<code>branch_protection_require_pull_request_approving_review_count</code> - Require a certain number of approving reviews before merging",id:"branch_protection_require_pull_request_approving_review_count---require-a-certain-number-of-approving-reviews-before-merging",level:2},{value:"Entity",id:"entity-8",level:3},{value:"Type",id:"type-8",level:3},{value:"Rule parameters",id:"rule-parameters-8",level:3},{value:"Rule definition options",id:"rule-definition-options-8",level:3},{value:"<code>branch_protection_require_pull_request_code_owners_review</code> - Verifies that a branch requires review from code owners",id:"branch_protection_require_pull_request_code_owners_review---verifies-that-a-branch-requires-review-from-code-owners",level:2},{value:"Entity",id:"entity-9",level:3},{value:"Type",id:"type-9",level:3},{value:"Rule parameters",id:"rule-parameters-9",level:3},{value:"Rule definition options",id:"rule-definition-options-9",level:3},{value:"<code>branch_protection_require_pull_request_dismiss_stale_reviews</code> - Require that new pushes to the branch dismiss old reviews",id:"branch_protection_require_pull_request_dismiss_stale_reviews---require-that-new-pushes-to-the-branch-dismiss-old-reviews",level:2},{value:"Entity",id:"entity-10",level:3},{value:"Type",id:"type-10",level:3},{value:"Rule parameters",id:"rule-parameters-10",level:3},{value:"Rule definition options",id:"rule-definition-options-10",level:3},{value:"<code>branch_protection_require_pull_request_last_push_approval</code> - Require that the most recent push to a branch be approved by someone other than the person who pushed it",id:"branch_protection_require_pull_request_last_push_approval---require-that-the-most-recent-push-to-a-branch-be-approved-by-someone-other-than-the-person-who-pushed-it",level:2},{value:"Entity",id:"entity-11",level:3},{value:"Type",id:"type-11",level:3},{value:"Rule parameters",id:"rule-parameters-11",level:3},{value:"Rule definition options",id:"rule-definition-options-11",level:3},{value:"<code>branch_protection_require_pull_requests</code> - Verifies that a branch requires pull requests",id:"branch_protection_require_pull_requests---verifies-that-a-branch-requires-pull-requests",level:2},{value:"Entity",id:"entity-12",level:3},{value:"Type",id:"type-12",level:3},{value:"Rule parameters",id:"rule-parameters-12",level:3},{value:"Rule definition options",id:"rule-definition-options-12",level:3},{value:"<code>branch_protection_require_signatures</code> - Whether commits to the branch must be signed",id:"branch_protection_require_signatures---whether-commits-to-the-branch-must-be-signed",level:2},{value:"Entity",id:"entity-13",level:3},{value:"Type",id:"type-13",level:3},{value:"Rule parameters",id:"rule-parameters-13",level:3},{value:"Rule definition options",id:"rule-definition-options-13",level:3}],s={toc:u},h="wrapper";function c(e){let{components:t,...r}=e;return(0,i.kt)(h,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"branch-protection-rules"},"Branch Protection Rules"),(0,i.kt)("p",null,"The following rule type is available for branch protection."),(0,i.kt)("h2",{id:"branch_protection_allow_deletions---whether-the-branch-can-be-deleted"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_allow_deletions")," - Whether the branch can be deleted"),(0,i.kt)("p",null,"This rule allows you to allow users with push access to delete matching branches."),(0,i.kt)("h3",{id:"entity"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_allow_deletions"))),(0,i.kt)("h3",{id:"rule-parameters"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_allow_deletions")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_allow_deletions")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allow_deletions (boolean)")," - Allows deletion of the protected branch by anyone with write access to the repository.")),(0,i.kt)("h2",{id:"branch_protection_allow_force_pushes---whether-force-pushes-are-allowed-to-the-branch"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_allow_force_pushes")," - Whether force pushes are allowed to the branch"),(0,i.kt)("p",null,"This rule allows you to permit force pushes for all users with push access."),(0,i.kt)("h3",{id:"entity-1"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-1"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_allow_force_pushes"))),(0,i.kt)("h3",{id:"rule-parameters-1"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_allow_force_pushes")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-1"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_allow_force_pushes")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allow_force_pushes (boolean)")," - Permits force pushes to the protected branch by anyone with write access to the repository.")),(0,i.kt)("h2",{id:"branch_protection_allow_fork_syncing---whether-users-can-pull-changes-from-upstream-when-the-branch-is-locked"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_allow_fork_syncing")," - Whether users can pull changes from upstream when the branch is locked"),(0,i.kt)("p",null,"A locked branch cannot be pulled from."),(0,i.kt)("h3",{id:"entity-2"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-2"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_allow_fork_syncing"))),(0,i.kt)("h3",{id:"rule-parameters-2"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_allow_fork_syncing")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-2"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_allow_fork_syncing")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allow_fork_syncing (boolean)")," - Whether users can pull changes from upstream when the branch is locked. Set to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," to allow fork syncing. Set to ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," to prevent fork syncing.")),(0,i.kt)("h2",{id:"branch_protection_enabled---verifies-that-a-branch-has-a-branch-protection-rule"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_enabled")," - Verifies that a branch has a branch protection rule"),(0,i.kt)("p",null,"You can protect important branches by setting branch protection rules, which define whether\ncollaborators can delete or force push to the branch and set requirements for any pushes to the branch,\nsuch as passing status checks or a linear commit history."),(0,i.kt)("h3",{id:"entity-3"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-3"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_enabled"))),(0,i.kt)("h3",{id:"rule-parameters-3"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_enabled")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-3"},"Rule definition options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"None")),(0,i.kt)("h2",{id:"branch_protection_enforce_admins---whether-the-protection-rules-apply-to-repository-administrators"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_enforce_admins")," - Whether the protection rules apply to repository administrators"),(0,i.kt)("p",null,"Enforce required status checks for repository administrators."),(0,i.kt)("h3",{id:"entity-4"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-4"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_enforce_admins"))),(0,i.kt)("h3",{id:"rule-parameters-4"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_enforce_admins")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-4"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_enforce_admins")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enforce_admins (boolean)")," - Specifies whether the protection rule applies to repository administrators.")),(0,i.kt)("h2",{id:"branch_protection_lock_branch---whether-the-branch-is-locked"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_lock_branch")," - Whether the branch is locked"),(0,i.kt)("p",null,"This rule allows you to set the branch as read-only. Users cannot push to the branch."),(0,i.kt)("h3",{id:"entity-5"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-5"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_lock_branch"))),(0,i.kt)("h3",{id:"rule-parameters-5"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_lock_branch")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-5"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_lock_branch")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lock_branch (boolean)")," - Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.")),(0,i.kt)("h2",{id:"branch_protection_require_conversation_resolution---whether-pr-reviews-must-be-resolved-before-merging"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_require_conversation_resolution")," - Whether PR reviews must be resolved before merging"),(0,i.kt)("p",null,"When enabled, all conversations on code must be resolved before a pull request can be merged into a branch that matches this rule."),(0,i.kt)("h3",{id:"entity-6"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-6"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_require_conversation_resolution"))),(0,i.kt)("h3",{id:"rule-parameters-6"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_conversation_resolution")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-6"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_conversation_resolution")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"required_conversation_resolution (boolean)")," - Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule.")),(0,i.kt)("h2",{id:"branch_protection_require_linear_history---whether-the-branch-requires-a-linear-history-with-no-merge-commits"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_require_linear_history")," - Whether the branch requires a linear history with no merge commits"),(0,i.kt)("p",null,"This rule allows you to prevent merge commits from being pushed to matching branches."),(0,i.kt)("h3",{id:"entity-7"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-7"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_require_linear_history"))),(0,i.kt)("h3",{id:"rule-parameters-7"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_linear_history")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-7"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_linear_history")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"required_linear_history (boolean)")," - Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch.")),(0,i.kt)("h2",{id:"branch_protection_require_pull_request_approving_review_count---require-a-certain-number-of-approving-reviews-before-merging"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_require_pull_request_approving_review_count")," - Require a certain number of approving reviews before merging"),(0,i.kt)("p",null,"Each pull request must have a certain number of approving reviews before it can be merged into a matching branch."),(0,i.kt)("h3",{id:"entity-8"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-8"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_require_pull_request_approving_review_count"))),(0,i.kt)("h3",{id:"rule-parameters-8"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_request_approving_review_count")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-8"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_request_approving_review_count")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"required_approving_review_count (integer)")," - Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.")),(0,i.kt)("h2",{id:"branch_protection_require_pull_request_code_owners_review---verifies-that-a-branch-requires-review-from-code-owners"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_require_pull_request_code_owners_review")," - Verifies that a branch requires review from code owners"),(0,i.kt)("p",null,"This rule allows you to require an approved review in pull requests including files with a designated code owner."),(0,i.kt)("h3",{id:"entity-9"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-9"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_require_pull_request_code_owners_review"))),(0,i.kt)("h3",{id:"rule-parameters-9"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_request_code_owners_review")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-9"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_request_code_owners_review")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"require_code_owner_reviews (boolean)")," - Set to true to require an approved review in pull requests including files with a designated code owner.")),(0,i.kt)("h2",{id:"branch_protection_require_pull_request_dismiss_stale_reviews---require-that-new-pushes-to-the-branch-dismiss-old-reviews"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_require_pull_request_dismiss_stale_reviews")," - Require that new pushes to the branch dismiss old reviews"),(0,i.kt)("p",null,"New reviewable commits pushed to a matching branch will dismiss pull request review approvals."),(0,i.kt)("h3",{id:"entity-10"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-10"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_require_pull_request_dismiss_stale_reviews"))),(0,i.kt)("h3",{id:"rule-parameters-10"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_request_dismiss_stale_reviews")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-10"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_request_dismiss_stale_reviews")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dismiss_stale_reviews (boolean)")," - Set to true to dismiss approving reviews when someone pushes a new commit.")),(0,i.kt)("h2",{id:"branch_protection_require_pull_request_last_push_approval---require-that-the-most-recent-push-to-a-branch-be-approved-by-someone-other-than-the-person-who-pushed-it"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_require_pull_request_last_push_approval")," - Require that the most recent push to a branch be approved by someone other than the person who pushed it"),(0,i.kt)("p",null,"The most recent push to a branch must be approved by someone other than the person who pushed it."),(0,i.kt)("h3",{id:"entity-11"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-11"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_require_pull_request_last_push_approval"))),(0,i.kt)("h3",{id:"rule-parameters-11"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_request_last_push_approval")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-11"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_request_last_push_approval")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"require_last_push_approval (boolean)")," - Whether the most recent push must be approved by someone other than the person who pushed it.")),(0,i.kt)("h2",{id:"branch_protection_require_pull_requests---verifies-that-a-branch-requires-pull-requests"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_require_pull_requests")," - Verifies that a branch requires pull requests"),(0,i.kt)("p",null,"This rule allows you to require that a pull request be opened before merging to a branch."),(0,i.kt)("h3",{id:"entity-12"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-12"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_require_pull_requests"))),(0,i.kt)("h3",{id:"rule-parameters-12"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_requests")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-12"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_pull_requests")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"required_pull_request_reviews (boolean)")," - When enabled, all commits must be made to a non-protected branch and submitted via a pull request before they can be merged into a branch that matches this rule.")),(0,i.kt)("h2",{id:"branch_protection_require_signatures---whether-commits-to-the-branch-must-be-signed"},(0,i.kt)("inlineCode",{parentName:"h2"},"branch_protection_require_signatures")," - Whether commits to the branch must be signed"),(0,i.kt)("p",null,"Commits pushed to matching branches must have verified signatures."),(0,i.kt)("h3",{id:"entity-13"},"Entity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"repository"))),(0,i.kt)("h3",{id:"type-13"},"Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch_protection_require_signatures"))),(0,i.kt)("h3",{id:"rule-parameters-13"},"Rule parameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_signatures")," rule supports the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch (string)")," - The name of the branch to check.")),(0,i.kt)("h3",{id:"rule-definition-options-13"},"Rule definition options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"branch_protection_require_signatures")," rule supports the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"required_signatures (boolean)")," - Specifies whether commits to the branch must be signed.")))}c.isMDXComponent=!0}}]);