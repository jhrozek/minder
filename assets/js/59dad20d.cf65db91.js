"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[6034],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,m=d["".concat(s,".").concat(f)]||d[f]||c[f]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={title:"Profiles",sidebar_position:20},o="Profiles in Minder",l={unversionedId:"understand/profiles",id:"understand/profiles",title:"Profiles",description:"Minder allows you to define profiles for your software supply chain.",source:"@site/docs/understand/profiles.md",sourceDirName:"understand",slug:"/understand/profiles",permalink:"/understand/profiles",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Profiles",sidebar_position:20},sidebar:"minder",previous:{title:"Providers",permalink:"/understand/providers"},next:{title:"Remediations",permalink:"/understand/remediation"}},s={},p=[{value:"Rules",id:"rules",level:2},{value:"Actions",id:"actions",level:2},{value:"Example profile",id:"example-profile",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"profiles-in-minder"},"Profiles in Minder"),(0,a.kt)("p",null,"Minder allows you to define profiles for your software supply chain."),(0,a.kt)("p",null,"Profiles in Minder allow you to group and manage\nrules for various entity types, such as repositories, pull requests, and artifacts, across your registered GitHub\nrepositories."),(0,a.kt)("p",null,"The anatomy of a profile is the profile itself, which outlines the rules to be\nchecked, the rule types, and the evaluation engine. Profiles are defined in a YAML file and can be configured to meet your compliance requirements.\nAs of time of writing, Minder supports the following evaluation engines:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://www.openpolicyagent.org/docs/latest/policy-language/"},"Rego"))," Open Policy Agents's native query language, Rego."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://jqlang.github.io/jq/"},"JQ"))," - a lightweight and flexible command-line JSON processor.")),(0,a.kt)("p",null,"Each engine is designed to be extensible, allowing you to integrate your own\nlogic and processes."),(0,a.kt)("p",null,"Stacklok has published ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stacklok/minder-rules-and-profiles/tree/main/profiles/github"},"a set of example profiles on GitHub"),"; see ",(0,a.kt)("a",{parentName:"p",href:"/how-to/manage_profiles"},"Managing Profiles")," for more details on how to set up profiles and rule types."),(0,a.kt)("h2",{id:"rules"},"Rules"),(0,a.kt)("p",null,"Each rule type within a profile is evaluated against your repositories that are registered with Minder."),(0,a.kt)("p",null,"The available entity rule type groups are ",(0,a.kt)("inlineCode",{parentName:"p"},"repository"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"pull_request"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"artifact"),"."),(0,a.kt)("p",null,"Each rule type group has a set of rules that can be configured individually."),(0,a.kt)("p",null,"The available properties for each rule type can be found in their YAML file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"def.rule_schema.properties")," section."),(0,a.kt)("p",null,"For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"secret_scanning")," rule type has the following ",(0,a.kt)("inlineCode",{parentName:"p"},"enabled")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nversion: v1\ntype: rule-type\nname: secret_scanning\n---\ndef:\n  # Defines the schema for writing a rule with this rule being checked\n  rule_schema:\n    properties:\n      enabled:\n        type: boolean\n        default: true\n")),(0,a.kt)("p",null,"You can find a list of available rules in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stacklok/minder-rules-and-profiles/tree/main/rule-types/github"},"https://github.com/stacklok/minder-rules-and-profiles")," repository."),(0,a.kt)("h2",{id:"actions"},"Actions"),(0,a.kt)("p",null,"Minder supports the ability to perform actions based on the evaluation of a rule such as creating alerts\nand automatically remediating non-compliant rules."),(0,a.kt)("p",null,"When a rule fails, Minder can open an alert to bring your attention to the non-compliance issue. Conversely, when the\nrule evaluation passes, Minder will automatically close any previously opened alerts related to that rule."),(0,a.kt)("p",null,"Minder also supports the ability to automatically remediate failed rules based on their type, i.e., by processing a\nREST call to enable/disable a non-compliant repository setting or creating a pull request with a proposed fix. Note\nthat not all rule types support automatic remediation yet."),(0,a.kt)("p",null,"Both alerts and remediations are configured in the profile YAML file under ",(0,a.kt)("inlineCode",{parentName:"p"},"alerts")," (Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"on"),")\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"remediate")," (Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"off"),")."),(0,a.kt)("h2",{id:"example-profile"},"Example profile"),(0,a.kt)("p",null,"Here's a profile which has a single rule for each entity group and its ",(0,a.kt)("inlineCode",{parentName:"p"},"alert")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"remediate")," features are both\nturned ",(0,a.kt)("inlineCode",{parentName:"p"},"on"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nversion: v1\ntype: profile\nname: github-profile\ncontext:\n  provider: github\nalert: "on"\nremediate: "on"\nrepository:\n  - type: secret_scanning\n    def:\n      enabled: true\nartifact:\n  - type: artifact_signature\n    params:\n      tags: [main]\n      name: my-artifact\n    def:\n      is_signed: true\n      is_verified: true\n      is_bundle_verified: true\npull_request:\n  - type: pr_vulnerability_check\n    def:\n      action: review\n      ecosystem_config:\n        - name: npm\n          vulnerability_database_type: osv\n          vulnerability_database_endpoint: https://api.osv.dev/v1/query\n          package_repository:\n            url: https://registry.npmjs.org\n        - name: go\n          vulnerability_database_type: osv\n          vulnerability_database_endpoint: https://api.osv.dev/v1/query\n          package_repository:\n            url: https://proxy.golang.org\n          sum_repository:\n            url: https://sum.golang.org\n')))}c.isMDXComponent=!0}}]);